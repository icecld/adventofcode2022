from os import system
from time import sleep
from getkey import getkey, keys

class coord():
    def __init__(self, x: int, y: int) -> None:
        self.x = x
        self.y = y

class rope():
    def __init__(self, length: int,  hx: int=0, hy: int=0) -> None:

        self.length = length

        self.head = coord(hx,hy)
        self.tails = [coord(hx,hy) for _ in range(length-1)]

        self.max_grid = 5

        self.tail_history = []
        self.tail_history.append((self.tails[-1].x, self.tails[-1].y))


    
    def update_position(self, direction: str, distance: int):


        for _ in range(distance):
            # Don't try and be fancy, move the snake 1 square at a time
            # and then cascade the movement down the tails
        
            if direction == "U":
                self.head.y += 1
            elif direction == "D":
                self.head.y -= 1
            elif direction == "R":
                self.head.x += 1
            elif direction == "L":
                self.head.x -= 1\
            
            prev_x = self.head.x
            prev_y = self.head.y


            for current_tail in self.tails:

                horizontal_diff = prev_x - current_tail.x               
                vertical_diff = prev_y - current_tail.y

                if vertical_diff > 1:
                    current_tail.y = current_tail.y + vertical_diff - 1
                    if abs(horizontal_diff) == 1:
                        current_tail.x = prev_x
                elif vertical_diff < -1:
                    current_tail.y = current_tail.y + vertical_diff + 1
                    if abs(horizontal_diff) == 1:
                        current_tail.x = prev_x

                if horizontal_diff > 1:
                    current_tail.x = current_tail.x + horizontal_diff - 1
                    if abs(vertical_diff) == 1:
                        current_tail.y = prev_y
                elif horizontal_diff < -1:
                    current_tail.x = current_tail.x + horizontal_diff + 1
                    if abs(vertical_diff) == 1:
                        current_tail.y = prev_y   
                
                prev_x = current_tail.x
                prev_y = current_tail.y

            self.tail_history.append((self.tails[-1].x, self.tails[-1].y))


            # This is just needed for the debug printout
            if self.max_grid < abs(self.head.x) or self.max_grid < abs(self.head.y):
                self.max_grid += 2

            


    def print_pos(self) -> None: 
        # Method to print the grid for the ol' debug.
        system('clear')
        grid_size = self.max_grid + 2
        
        for y in range(grid_size, -grid_size, -1):
            print(str(y).zfill(3), end= "")
            for x in range(-grid_size, grid_size):
                if (x, y) == (self.head.x, self.head.y):
                    print("H", end="")
                elif (x, y) == (self.tails[-1].x, self.tails[-1].y) :
                    print("T", end="")
                elif (x, y) in [(t.x, t.y) for t in self.tails]:
                    for i, t in enumerate(self.tails):
                        if (x, y) == (t.x, t.y):
                            print(str(i+1), end="")
                            break
                else:
                    if (x, y) in self.tail_history:
                        print("#", end="")
                    else:
                        print(".", end="")
            print("\n", end = "")

        print("")
        print(f"H:{self.head.x},{self.head.y}   T:{self.tails[-1].x},{self.tails[-1].y}")
        print(len(set(self.tail_history)))
        sleep(0.1)
        

        

def rope_count_unique_positions(input: str) -> int:
    # Runs the input movements on the snake, returns unique values in tail history

    r = rope(10)
    for line in input.splitlines():
        dir = line[0]
        dist = int(line[2:])
        r.update_position(dir, dist)
    #r.print_pos()
    return len(set(r.tail_history))


def rope_by_key() -> None:
    # Function to move the snake around manually, for fun debug time
    r = rope(10)
    while True:
        key = getkey()
        if key == keys.UP:
            r.update_position("U", 1)
        elif key == keys.DOWN:
            r.update_position("D", 1)
        elif key == keys.LEFT:
            r.update_position("L", 1)
        elif key == keys.RIGHT:
            r.update_position("R", 1)
        r.print_pos()




def main():
    #rope_by_key()

    print(rope_count_unique_positions(INPUT))



INPUT = """L 2
R 2
U 1
R 2
U 2
D 2
U 1
L 1
U 1
L 1
D 1
U 1
L 1
R 1
L 2
D 2
R 1
L 2
D 2
L 2
U 1
D 2
R 1
D 1
U 1
D 1
U 2
L 1
U 2
R 1
D 2
L 1
D 1
U 1
L 1
R 1
L 1
U 2
L 1
U 1
L 2
R 2
D 2
U 2
R 1
U 1
D 2
L 1
U 1
D 2
U 1
L 2
U 1
D 2
U 2
L 1
D 2
L 1
U 1
D 1
U 1
D 2
R 2
U 1
L 1
R 2
D 2
R 1
L 1
R 1
D 1
U 1
L 2
U 1
L 1
R 1
D 2
U 1
L 1
D 2
R 2
D 1
U 1
R 2
U 1
D 1
R 2
D 1
R 1
U 2
D 1
L 2
U 2
R 1
L 1
R 2
U 2
L 2
U 2
D 1
U 1
D 2
R 2
U 2
R 1
D 1
R 2
U 2
D 2
U 1
R 1
U 2
D 3
R 1
L 1
D 3
U 3
L 3
D 2
U 3
D 1
R 2
D 2
L 1
U 3
R 1
U 1
R 3
D 1
L 3
R 1
U 1
L 2
D 2
L 1
U 2
D 1
L 2
D 1
U 1
R 2
D 2
U 2
D 1
L 1
R 2
U 3
D 3
U 2
L 1
D 1
U 2
R 3
U 1
D 1
U 3
R 2
U 3
D 2
U 1
R 1
U 2
R 2
U 1
L 1
U 3
L 2
R 1
U 2
D 3
L 1
U 3
D 3
U 3
L 1
D 2
L 2
R 2
D 3
R 3
D 2
R 2
D 3
U 3
R 1
D 3
U 2
R 3
D 2
R 3
U 1
R 2
D 2
U 3
D 3
R 1
U 3
D 1
U 3
D 3
R 2
U 2
D 1
R 3
D 2
U 3
L 1
R 3
L 2
U 1
L 2
U 1
R 1
U 2
R 3
D 2
U 1
L 3
D 2
L 2
D 3
R 1
U 1
R 1
D 1
L 3
D 2
L 3
D 4
R 2
D 4
L 1
D 4
U 2
R 2
U 3
L 4
D 1
R 1
L 4
U 1
D 3
L 2
R 3
U 1
R 2
U 4
D 1
L 2
R 2
D 4
L 2
D 2
R 1
D 2
L 1
U 4
L 3
U 3
R 4
L 3
U 2
D 3
U 2
D 1
L 2
R 1
L 1
R 1
D 3
L 2
D 3
U 2
L 2
R 1
L 2
D 2
R 1
U 3
D 2
L 1
D 2
U 1
L 1
R 1
D 3
U 2
L 4
U 3
R 4
L 2
D 4
R 3
D 4
U 3
R 3
D 3
R 1
U 1
D 2
U 4
D 4
U 3
D 1
L 4
R 2
L 2
U 3
R 2
D 1
R 3
D 1
L 3
R 2
D 1
L 3
U 3
R 4
U 1
L 2
D 3
R 2
U 2
D 4
U 4
D 4
R 3
D 1
U 4
D 3
R 4
U 1
D 2
L 5
R 3
U 1
L 1
D 4
R 3
U 1
R 3
D 5
R 5
D 2
U 2
L 5
R 2
U 1
L 4
R 4
U 3
D 3
U 1
R 4
U 4
R 4
U 3
D 1
L 1
U 2
R 3
L 5
R 3
D 1
R 2
U 1
L 2
D 5
L 2
D 2
U 4
D 2
R 3
L 5
U 4
D 1
L 3
D 4
L 1
D 4
R 2
D 2
R 3
U 2
D 1
R 1
D 4
R 1
D 5
U 4
D 4
R 1
U 2
D 2
L 2
R 1
L 1
D 5
R 4
D 2
U 3
L 1
U 3
L 4
D 5
R 4
U 3
D 1
U 4
L 2
D 5
L 4
R 4
U 4
L 3
U 5
L 1
R 2
L 1
R 1
L 4
R 3
D 3
U 3
L 3
D 4
R 1
L 2
D 4
U 3
L 5
D 1
L 2
U 2
R 2
L 3
R 4
D 4
U 3
D 5
L 3
U 2
L 2
U 2
R 4
L 1
R 6
D 3
R 6
U 1
L 3
R 4
U 3
L 6
R 1
D 3
R 4
D 3
L 1
U 1
D 3
R 2
L 4
U 2
L 2
U 4
D 3
L 5
D 4
L 4
R 2
D 4
L 2
R 5
U 3
D 2
L 1
R 5
D 1
U 1
R 6
L 1
U 4
D 2
R 4
D 5
R 3
U 5
D 1
R 1
D 1
U 6
R 3
U 6
L 3
R 6
D 1
U 1
D 4
U 1
R 1
D 2
U 5
L 5
U 1
L 5
R 5
U 3
R 5
U 4
L 4
U 3
D 5
R 6
L 1
U 3
R 6
L 1
U 6
R 1
L 1
D 3
L 5
R 6
U 2
R 5
U 5
D 5
R 3
U 2
L 6
D 5
L 4
U 5
D 3
U 4
R 3
D 6
U 4
R 4
U 5
L 3
U 5
R 4
L 4
U 3
L 1
R 6
L 4
U 6
D 1
R 4
U 4
L 5
U 3
D 6
L 3
U 1
L 3
R 5
L 5
R 7
D 3
L 4
R 7
U 1
D 2
R 7
U 6
L 2
D 7
L 4
U 4
L 7
D 4
R 7
D 1
U 7
R 4
D 7
U 4
D 4
R 3
L 4
U 3
L 6
D 4
U 1
R 1
U 1
L 7
D 1
U 3
L 3
R 5
U 6
R 5
U 5
L 1
U 5
R 7
D 1
L 6
R 2
L 5
U 3
D 2
U 1
L 2
R 7
U 3
D 6
U 3
D 7
U 2
D 1
U 5
D 2
L 2
U 5
R 1
D 5
U 6
D 5
U 5
L 1
R 7
L 4
U 3
L 7
R 2
L 7
R 5
D 3
L 5
R 2
U 6
L 3
D 6
U 5
L 1
D 7
U 3
L 2
U 7
D 7
R 2
L 1
U 7
L 1
U 3
R 6
D 6
R 6
D 7
L 5
D 4
U 4
D 5
R 5
D 2
R 7
L 4
U 7
R 2
U 3
L 2
R 6
U 8
R 6
D 6
L 7
D 6
L 1
D 4
U 1
D 8
U 8
L 5
R 8
D 1
R 6
U 5
R 3
L 4
D 5
L 2
D 8
U 3
L 7
U 4
D 8
R 6
U 4
L 7
D 8
L 3
U 7
R 1
U 2
R 5
D 2
R 2
U 6
D 1
R 6
L 8
U 5
R 7
U 1
R 5
L 7
D 4
L 7
U 8
L 8
R 4
L 1
D 6
L 6
U 7
L 5
D 1
U 3
R 8
D 2
R 3
L 7
U 5
R 6
L 2
D 2
R 5
L 4
D 1
U 4
L 4
R 7
U 6
D 7
R 1
L 8
D 3
L 7
U 3
R 3
U 1
D 7
R 7
L 7
U 7
L 5
D 1
R 8
U 3
D 1
U 6
R 7
D 6
L 3
D 5
R 8
L 1
U 3
R 2
U 1
R 2
D 5
R 4
L 1
D 4
U 5
R 8
U 2
L 4
R 6
D 1
U 7
D 8
R 1
L 1
U 4
L 2
U 7
D 2
R 7
D 9
U 7
L 1
D 8
R 3
L 1
R 3
U 5
L 5
D 7
U 3
R 4
U 5
L 2
R 2
D 7
R 2
U 4
L 9
R 7
U 6
R 4
U 8
L 2
R 7
U 5
L 6
R 7
U 7
L 4
D 2
L 1
D 4
R 5
U 2
L 3
R 9
U 8
D 5
L 3
U 1
L 2
D 5
L 7
D 7
U 1
L 2
D 8
R 9
L 5
D 8
U 1
L 7
U 9
R 1
L 1
D 3
R 3
U 6
L 4
R 6
L 1
R 6
U 2
R 9
D 3
R 6
U 5
R 9
L 7
D 6
L 9
D 8
R 4
L 3
U 2
R 7
L 5
D 7
U 8
R 5
L 2
D 8
L 4
R 3
D 1
U 3
D 3
U 3
D 3
R 2
L 5
R 9
L 5
U 9
R 3
D 9
L 4
U 3
L 2
R 1
D 1
R 6
D 4
L 6
R 1
D 8
L 3
R 2
D 7
U 2
L 4
R 10
L 9
R 4
L 2
U 10
R 5
D 4
L 7
U 5
L 7
U 7
D 6
U 7
R 5
L 5
D 5
R 10
D 4
L 3
D 4
U 8
L 5
U 5
L 8
R 3
U 5
D 6
L 2
R 1
L 7
U 8
R 2
L 5
R 1
D 2
U 1
L 1
R 5
U 6
D 6
R 2
U 8
L 1
D 8
L 5
R 10
U 7
R 9
D 4
L 4
U 6
D 3
R 3
L 5
R 3
U 6
R 10
U 5
L 6
R 2
D 9
U 2
D 4
U 3
D 2
U 7
L 1
R 3
L 10
U 7
R 7
U 2
R 5
L 3
D 4
R 1
D 3
L 3
R 6
D 6
R 3
L 9
R 3
L 1
D 8
R 9
U 2
D 6
U 2
L 9
U 8
D 2
L 1
U 2
D 10
U 7
R 8
D 4
L 7
U 1
D 1
U 1
L 5
D 5
L 10
R 9
U 5
L 8
D 2
R 2
L 8
D 8
L 11
U 5
L 11
D 9
L 10
U 1
D 9
R 5
U 4
D 2
R 3
L 7
D 7
L 9
R 3
L 3
U 7
R 1
U 4
R 7
D 10
L 8
U 2
L 6
R 1
U 10
D 3
U 2
L 4
D 5
R 6
L 7
R 8
L 4
U 1
D 11
U 5
R 4
L 9
R 8
L 2
R 4
U 10
D 4
R 7
D 3
U 6
D 6
U 3
L 11
R 4
D 6
U 9
R 10
D 8
U 3
R 2
U 7
D 5
R 10
U 5
R 3
U 9
L 2
D 3
U 1
L 10
U 2
L 3
U 10
L 6
D 4
L 1
D 1
U 3
L 10
R 6
L 1
U 2
R 1
L 9
D 4
L 11
U 6
D 3
L 9
U 7
D 3
U 3
R 8
U 11
R 2
D 1
U 3
R 2
L 7
D 5
R 10
U 1
D 10
L 1
U 10
D 11
U 5
R 6
D 6
R 10
L 9
D 3
U 4
L 12
D 7
R 9
U 4
D 10
L 11
U 1
R 3
U 6
L 11
U 10
R 3
U 4
L 9
U 4
L 12
U 4
D 2
L 12
D 12
L 5
U 9
R 7
D 12
L 2
U 3
R 7
D 9
L 2
R 9
D 10
U 6
R 10
D 8
R 8
L 9
U 11
R 5
D 7
U 3
R 7
U 10
R 5
D 4
U 3
D 6
R 11
U 9
L 3
D 5
R 6
L 11
D 5
R 2
D 2
R 8
D 1
U 5
L 3
U 8
L 10
D 7
R 12
D 7
L 8
D 5
U 9
D 10
L 4
R 6
L 9
R 10
L 11
U 8
D 8
R 2
L 5
U 9
R 1
L 12
D 6
R 11
L 4
R 6
U 12
D 5
U 4
L 7
D 2
R 5
U 5
D 7
R 10
L 9
U 4
D 11
U 12
D 6
U 4
L 3
U 4
R 11
D 7
L 11
R 9
U 2
R 7
D 5
U 13
L 10
U 9
L 9
U 4
D 8
R 7
L 8
U 3
L 1
U 6
D 11
U 11
D 12
L 13
U 13
R 8
D 4
U 6
D 3
U 9
R 11
D 6
R 9
D 1
U 8
D 9
R 2
U 3
R 13
D 7
U 6
D 10
U 13
D 4
U 1
R 10
D 9
U 8
D 7
U 7
L 13
R 10
L 8
D 7
U 9
R 8
L 8
U 3
D 5
L 1
U 5
D 9
R 2
D 8
L 7
U 2
R 11
U 9
D 7
L 2
D 9
R 8
L 12
R 4
D 7
U 2
L 8
U 12
D 11
R 9
U 9
R 13
U 3
L 9
U 9
R 5
U 10
R 13
U 6
D 4
U 2
R 7
D 3
R 1
L 4
R 9
L 3
D 6
L 9
R 6
D 1
L 6
D 5
U 10
R 2
L 1
R 1
L 1
U 9
D 5
U 2
D 12
L 9
U 1
L 14
U 9
L 11
R 11
L 3
D 5
U 5
D 8
L 9
U 12
R 11
L 1
D 9
R 9
L 7
D 7
U 4
D 5
L 11
D 9
R 13
D 3
R 9
D 6
U 12
L 2
D 10
L 6
U 12
R 2
D 9
R 2
D 12
R 14
U 3
R 3
D 12
R 13
U 1
D 11
L 1
D 9
U 11
R 9
D 10
L 7
D 13
R 10
D 2
U 7
L 7
R 14
D 10
R 9
D 13
L 7
U 5
R 4
D 4
R 3
U 8
D 8
R 4
U 14
R 8
U 12
D 6
L 11
D 12
U 13
L 13
U 8
L 2
R 7
U 1
L 14
R 1
D 1
L 9
U 1
R 8
U 7
D 13
U 1
D 5
L 8
R 13
L 1
U 14
L 11
D 7
R 7
L 8
U 8
D 9
U 14
L 1
U 7
D 7
L 12
D 7
L 4
U 14
R 2
D 3
U 9
L 9
D 13
U 9
D 5
U 11
D 6
U 10
L 10
R 8
D 11
L 3
R 6
D 10
R 11
L 3
D 15
R 6
D 12
U 4
R 5
L 15
D 9
L 5
U 12
R 2
D 14
U 10
L 1
U 14
L 5
D 12
U 11
D 6
L 12
R 2
D 9
L 15
D 6
L 3
U 6
L 8
R 6
L 11
U 12
L 2
R 12
U 15
D 15
U 1
L 4
R 3
D 9
U 9
D 2
U 2
R 6
U 1
L 4
R 5
L 8
R 2
U 6
D 13
R 12
L 13
D 3
L 9
U 5
R 5
D 3
R 8
L 7
R 12
L 11
U 9
L 4
D 9
U 13
R 15
D 13
U 12
R 1
L 14
R 5
L 8
U 6
D 5
U 6
D 7
U 14
D 4
R 6
L 7
U 4
L 12
D 7
U 11
L 3
R 4
U 4
L 9
U 10
R 9
D 15
R 9
D 6
L 4
U 2
L 5
R 9
L 8
R 2
D 5
U 8
D 11
L 10
R 1
U 10
L 10
U 8
L 8
R 16
U 9
D 5
L 8
D 3
L 5
R 3
U 7
R 9
U 3
D 5
U 11
R 5
L 7
D 3
R 15
U 8
R 12
U 1
D 1
R 12
L 15
D 5
R 5
U 12
R 11
L 7
U 13
L 9
R 14
U 13
D 15
R 15
D 9
U 3
L 15
D 15
U 8
L 2
U 4
D 5
L 10
R 5
D 15
U 15
L 11
U 7
L 3
D 6
L 9
D 9
U 11
L 9
U 2
R 14
L 13
U 8
D 13
R 5
U 5
L 5
U 15
D 8
U 15
R 3
U 12
L 3
D 9
U 12
D 10
R 6
L 16
D 14
L 10
R 11
U 9
R 3
U 15
L 10
U 14
L 1
D 13
R 4
U 8
R 10
D 2
U 1
L 2
D 9
R 10
L 15
D 7
R 5
D 12
L 1
R 8
D 14
U 4
D 11
R 12
L 3
D 6
U 6
D 12
L 15
U 4
L 3
R 10
L 9
D 5
R 17
U 12
R 2
L 2
D 15
U 4
R 4
L 17
R 8
U 12
R 1
L 3
D 1
R 7
L 13
U 14
D 1
U 5
L 2
R 5
L 9
U 6
D 5
R 14
U 11
D 7
L 10
D 10
L 17
R 2
U 9
D 7
L 15
R 8
D 16
L 15
D 8
L 4
U 4
D 5
R 4
D 15
L 8
D 11
L 5
U 5
D 4
R 14
U 16
R 8
L 2
R 16
L 5
U 15
D 13
L 5
U 5
D 6
R 1
L 4
R 4
U 6
D 11
L 8
R 9
U 8
R 10
U 1
L 13
R 10
L 8
D 11
U 9
L 7
U 5
L 15
D 5
R 3
D 16
L 2
U 12
R 15
U 9
L 13
U 15
L 4
U 3
R 3
L 13
D 5
U 16
R 5
D 5
U 9
L 7
U 10
D 1
R 2
U 14
L 13
U 1
L 12
U 10
D 3
U 1
R 14
D 14
U 16
R 6
U 14
D 5
L 18
D 18
U 8
L 2
R 5
D 17
U 18
R 2
L 10
D 6
R 17
L 10
U 1
R 8
L 14
U 10
R 7
L 16
U 9
D 13
U 2
L 1
D 14
U 15
R 15
D 2
R 13
D 3
R 9
D 18
R 16
L 1
R 3
U 1
R 1
U 16
D 17
U 1
D 11
R 11
D 1
U 5
R 1
L 1
R 10
D 5
R 1
D 15
R 14
L 5
U 12
L 8
R 6
D 8
L 5
D 11
L 14
D 5
R 15
L 16
R 12
L 10
D 8
L 3
R 1
D 10
U 13
D 7
U 10
L 13
D 8
R 7
L 13
R 4
L 9
U 6
D 14
L 16
D 18
R 13
U 13
L 17
R 5
U 9
R 11
D 18
R 16
L 4
D 8
R 18
L 14
R 11
D 14
R 2
D 6
L 12
D 3
U 3
L 4
D 7
L 4
D 6
L 12
D 9
L 2
R 16
L 12
U 4
L 12
U 4
R 17
L 8
U 8
R 11
U 14
D 15
L 19
R 1
L 16
R 3
U 15
R 5
L 1
D 17
L 13
U 14
D 9
U 3
L 7
R 11
D 7
R 15
L 6
U 17
R 17
D 17
U 18
L 1
R 8
L 7
D 9
L 5
D 1
R 2
D 16
U 18
D 7
U 13
L 10
U 15
R 18
U 7
L 9
R 6
U 18
R 9
D 8
L 6
R 7
L 11
U 12
R 7
D 4
U 8
R 16
U 17
D 4
U 10
L 19
D 14
L 12
R 18
D 4
R 9
U 12
R 14
U 9
L 16
D 14
U 7
R 14
L 19
U 16
L 18
U 1
R 19
D 7
R 6
U 12
L 16
R 16
U 16
L 6
R 18
L 19
U 10
D 15
U 7
D 1
U 7
L 12
U 4
R 5
U 12
R 18
D 15
U 4
L 8
U 18
D 18
L 3
R 19
L 15
R 11
U 1
R 6
L 8
R 1
L 3"""


if __name__ == "__main__":
    main()